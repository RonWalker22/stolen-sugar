[
    {
        "repo_id": 472432551,
        "user_id": 5840057,
        "timestamp": "2022-04-07T11:28:18.990824",
        "branch": "zmcgohan",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arm": "a",
                    "bus": "b",
                    "cub": "c",
                    "dip": "d",
                    "fly": "f",
                    "gift": "g",
                    "ice": "i",
                    "jazz": "j",
                    "knife": "k",
                    "loaf": "l",
                    "maid": "m",
                    "nerd": "n",
                    "out": "o",
                    "phone": "p",
                    "quiz": "q",
                    "rat": "r",
                    "slug": "s",
                    "toast": "t",
                    "use": "u",
                    "vet": "v",
                    "wind": "w",
                    "x-ray": "x",
                    "yen": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.number_key",
                "commands": {
                    "oh": "0",
                    "sev": "7"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "puff": "enter",
                    "scape": "escape",
                    "pee down": "pagedown",
                    "pee up": "pageup",
                    "junk": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "squat": "'",
                    "oh par": "(",
                    "clo par": ")",
                    "bar": "|",
                    "semi": ";",
                    "queue mark": "?",
                    "exclaim": "!",
                    "at": "@"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "dot": ".",
                    "semi": ";",
                    "queue mark": "?",
                    "exclaim": "!",
                    "star": "*",
                    "hash": "#",
                    "at": "@",
                    "dollar": "$"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "address bar | go address | go url | go": "browser.focus_address()",
                    "go {user.website}": "browser.go(website)",
                    "bookmark": "browser.bookmark()",
                    "fresh": "browser.reload()",
                    "fresh hard": "browser.reload_hard()"
                }
            },
            {
                "file": "apps/platforms/win/outlook/outlook.talon",
                "context": "win outlook",
                "commands": {
                    "store": "key(alt h o 1)",
                    "new mail": "key(ctrl-n)"
                }
            },
            {
                "file": "apps/teams/teams.talon",
                "context": "teams",
                "commands": {
                    "up": "key(alt-up)",
                    "down": "key(alt-down)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "[tab] (open | new)": "app.tab_open()",
                    "kill": "user.tab_close_wrapper()",
                    "tee <number>": "user.tab_jump(number)",
                    "[tab] duplicate": "user.tab_duplicate()"
                }
            },
            {
                "file": "misc/help_open.talon",
                "context": "help open",
                "commands": {
                    "help (previous | last)": "user.help_previous()",
                    "help (return | back)": "user.help_return()",
                    "help (refresh | fresh)": "user.help_refresh()",
                    "(help close | kelp)": "user.help_hide()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "[control] mouse": "user.mouse_toggle_control_mouse()",
                    "righty | touch right": "mouse_click(1)\nuser.grid_close()",
                    "midclick | touch mid": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke | touch two)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick | touch three)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "[go] word left": "edit.word_left()",
                    "[go] word right": "edit.word_right()",
                    "[go] left": "edit.left()",
                    "[go] right": "edit.right()",
                    "[go] up": "edit.up()",
                    "[go] down": "edit.down()",
                    "(go way left | bend)": "edit.line_start()\nedit.line_start()",
                    "(go way right | lend)": "edit.line_end()"
                }
            }
        ]
    },
    {
        "repo_id": 464229346,
        "user_id": 100534119,
        "timestamp": "2022-04-07T11:28:51.124284",
        "branch": "ryan_personal",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "back": "backspace",
                    "dell": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "speechmark": "\"",
                    "double quo": "\""
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "scroll up": "user.mouse_scroll_up()",
                    "scroll down": "user.mouse_scroll_down()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "tal sleep [<phrase>]": "speech.disable()",
                    "tal wake": "speech.enable()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "move left": "edit.left()",
                    "move right": "edit.right()",
                    "move up": "edit.up()",
                    "move down": "edit.down()",
                    "move back": "edit.left()",
                    "move forward": "edit.right()"
                }
            }
        ]
    },
    {
        "repo_id": 462815102,
        "user_id": 4099370,
        "timestamp": "2022-04-07T11:29:23.315967",
        "branch": "bryan",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "cab": "c",
                    "dog": "d",
                    "ham": "h",
                    "inn": "i"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 458903871,
        "user_id": 24389100,
        "timestamp": "2022-04-07T11:29:54.973633",
        "branch": "vinu-copy",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "eric": "e"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "wake": "speech.enable()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 457589121,
        "user_id": 1400380,
        "timestamp": "2022-04-07T11:30:27.281359",
        "branch": "replace-words",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 457542669,
        "user_id": 49439044,
        "timestamp": "2022-04-07T11:30:59.003372",
        "branch": "replace-words",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 457521235,
        "user_id": 243140,
        "timestamp": "2022-04-07T11:31:30.645685",
        "branch": "replace-words",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 457010828,
        "user_id": 98036866,
        "timestamp": "2022-04-07T11:32:02.845350",
        "branch": "replace-words",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 455381897,
        "user_id": 3068446,
        "timestamp": "2022-04-07T11:32:34.852659",
        "branch": "twiebelt",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "score": "_",
                    "leap": "(",
                    "weep": "(",
                    "reap": ")",
                    "beep": "{",
                    "boop": "}",
                    "semi": ";"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 452483437,
        "user_id": 92004154,
        "timestamp": "2022-04-07T11:33:06.530645",
        "branch": "nat-customizations",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 450253352,
        "user_id": 24943868,
        "timestamp": "2022-04-07T11:33:38.182400",
        "branch": "fork",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "bar": "b",
                    "vi": "v",
                    "well": "w",
                    "zed": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "up": "pageup",
                    "down": "pagedown"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 447450940,
        "user_id": 82670783,
        "timestamp": "2022-04-07T11:34:09.794777",
        "branch": "home",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 446581588,
        "user_id": 20517406,
        "timestamp": "2022-04-07T11:34:41.443670",
        "branch": "customize",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ice": "i"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 445816388,
        "user_id": 63201480,
        "timestamp": "2022-04-07T11:35:13.261570",
        "branch": "CameronScottBell",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "ice": "i",
                    "zone": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "full colon": ":"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "full colon": ":"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "pay that": "edit.paste()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cleft": "key(backspace)",
                    "clight": "key(delete)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/visualstudio/visual_studio.talon",
                "context": "visual studio",
                "commands": {
                    "go imp": "key(f12)",
                    "toggle break point": "key(f9)",
                    "debug step over": "key(f10)"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "show commands [<user.text>]": "user.vscode(\"workbench.action.showCommands\")\ninsert(user.text or \"\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 443978995,
        "user_id": 21286812,
        "timestamp": "2022-04-07T11:35:45.119470",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "kick": "k",
                    "ox": "o",
                    "risk": "r",
                    "spun": "s"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "many": "cmd",
                    "troll": "ctrl",
                    "ship": "shift"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter",
                    "drill": "delete",
                    "chuck": "backspace",
                    "scratch": "backspace",
                    "scrape": "escape",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "brick": "`",
                    "stroke": "/",
                    "backstroke": "\\",
                    "equal": "=",
                    "score": "_",
                    "quest": "?",
                    "single": "'",
                    "double": "\"",
                    "leper": "(",
                    "repper": ")",
                    "lack": "[",
                    "rack": "]",
                    "lace": "{",
                    "race": "}",
                    "langle": "<",
                    "wrangle": ">",
                    "snow": "*",
                    "percy": "%",
                    "tangle": "^",
                    "semi": ";",
                    "stack": ":",
                    "drip": ","
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "fun one": "f1",
                    "fun two": "f2",
                    "fun three": "f3",
                    "fun four": "f4",
                    "fun five": "f5",
                    "fun six": "f6",
                    "fun seven": "f7",
                    "fun eight": "f8",
                    "fun nine": "f9",
                    "fun ten": "f10",
                    "fun eleven": "f11",
                    "fun twelve": "f12"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(pace | paste) that": "edit.paste()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "padding": "insert(\"  \")\nkey(left)",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "<user.format_text>": "user.insert_many(format_text_list)",
                    "<user.format_text> halt": "user.insert_many(format_text_list)",
                    "strict <user.format_text>": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} scout <user.text>": "user.search_with_search_engine(search_engine, user.text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "breed": "user.multi_cursor_select_more_occurrences()",
                    "breed all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_scroll_up()",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "<user.operator> comment": "\"// \"",
                    "<user.operator> (funk | func | fun)": "\"func \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> break": "\"break\"",
                    "<user.operator> (chan | channel)": "\" chan \"",
                    "<user.operator> go": "\"go \"",
                    "<user.operator> if": "\"if \"",
                    "<user.operator> else if": "\" else if \"",
                    "<user.operator> else": "\" else \"",
                    "<user.operator> while": "\"while \"",
                    "<user.operator> for": "\"for \"",
                    "<user.operator> for range": "\"forr \"",
                    "<user.operator> format": "\"fmt\"",
                    "<user.operator> switch": "\"switch \"",
                    "<user.operator> select": "\"select \"",
                    "<user.operator> (const | constant)": "\" const \"",
                    "<user.operator> case": "\" case \"",
                    "<user.operator> default": "\" default:\"",
                    "<user.operator> type": "\" type \"",
                    "<user.operator> true": "\" true \"",
                    "<user.operator> false": "\" false \"",
                    "<user.operator> (start | struct | struck)": "insert(\" struct {\")\nkey(\"enter\")",
                    "<user.operator> interface": "insert(\" interface {\")\nkey(\"enter\")",
                    "<user.operator> string": "\" string \"",
                    "<user.operator> slice": "\" []\"",
                    "<user.operator> (int | integer | ant) 64": "\" int64 \"",
                    "<user.operator> return": "\" return \"",
                    "<user.operator> (air | err)": "\"err\""
                }
            },
            {
                "file": "lang/vimscript/vimscript.talon",
                "context": "vimscript",
                "commands": {
                    "<user.operator> command": "\"command! \"",
                    "<user.operator> end if": "\"endif\"",
                    "<user.operator> end for": "\"endfor\"",
                    "<user.operator> end while": "\"endwhile\"",
                    "<user.operator> end function": "\"endfunction\"",
                    "<user.operator> continue": "\"continue\""
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "<user.operator> (def | deaf | deft)": "\"def \"",
                    "<user.operator> try": "\"try:\\n\"",
                    "<user.operator> except": "\"except \"",
                    "<user.operator> raise": "\"raise \"",
                    "<user.operator> past": "\"pass\""
                }
            },
            {
                "file": "lang/r/r.talon",
                "context": "r",
                "commands": {
                    "<user.operator> na": "insert(\"NA\")"
                }
            },
            {
                "file": "lang/javascript/javascript.talon",
                "context": "javascript",
                "commands": {
                    "<user.operator> const": "\"const \"",
                    "<user.operator> let": "\"let \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> async": "\"async \"",
                    "<user.operator> await": "\"await \"",
                    "<user.operator> spread": "\"...\""
                }
            },
            {
                "file": "lang/c/c.talon",
                "context": "c",
                "commands": {
                    "<user.operator> define": "\"#define \"",
                    "<user.operator> undefine": "\"#undef \"",
                    "<user.operator> if define": "\"#ifdef \"",
                    "<user.operator> pre if": "\"#if \"",
                    "<user.operator> error": "\"#error \"",
                    "<user.operator> pre else if": "\"#elif \"",
                    "<user.operator> pre end": "\"#endif \"",
                    "<user.operator> pragma": "\"#pragma \"",
                    "<user.operator> default": "\"default:\\nbreak;\""
                }
            },
            {
                "file": "lang/ruby/ruby.talon",
                "context": "ruby",
                "commands": {
                    "<user.operator> end": "\"end\"",
                    "<user.operator> begin": "\"begin\"",
                    "<user.operator> rescue": "\"rescue \"",
                    "<user.operator> module": "\"module \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "pebbles": "\"...\"",
                    "spam": "\", \"",
                    "quad": "'\"\"'\nkey(left)",
                    "twin": "\"''\"\nkey(left)",
                    "escaped quad": "'\\\\\"\\\\\"'\nkey(left)\nkey(left)",
                    "escaped twin": "\"\\\\'\\\\'\"\nkey(left)\nkey(left)",
                    "round": "insert(\"()\")\nkey(left)",
                    "square": "insert(\"[]\")\nkey(left)",
                    "curly": "insert(\"{}\")\nkey(left)",
                    "(diamond | angle) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(curly | lace) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(round | leper) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(double | quad) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(single | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "<user.find> case": "user.find_toggle_match_by_case()",
                    "<user.find> word": "user.find_toggle_match_by_word()",
                    "<user.find> expression": "user.find_toggle_match_by_regex()",
                    "<user.find> next": "user.find_next()",
                    "<user.find> previous": "user.find_previous()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "dedent that": "edit.indent_less()",
                    "drag line down": "edit.line_swap_down()",
                    "drag line up": "edit.line_swap_up()",
                    "smear (line|that)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "tug": "edit.left()",
                    "drain": "edit.word_left()",
                    "push": "edit.right()",
                    "step": "edit.word_right()",
                    "head": "edit.line_start()",
                    "tail": "edit.line_end()",
                    "<user.select> lefter": "edit.extend_word_left()",
                    "<user.select> writer": "edit.extend_word_right()",
                    "take head": "edit.extend_line_start()",
                    "take tail": "edit.extend_line_end()",
                    "<user.delete> up": "edit.extend_line_up()\nedit.delete()",
                    "<user.delete> down": "edit.extend_line_down()\nedit.delete()",
                    "<user.delete> word": "edit.delete_word()",
                    "<user.delete> head": "edit.extend_line_start()\nedit.delete()",
                    "<user.delete> tail": "edit.extend_line_end()\nedit.delete()",
                    "<user.delete> way up": "edit.extend_file_start()\nedit.delete()",
                    "<user.delete> way down": "edit.extend_file_end()\nedit.delete()",
                    "<user.delete> all": "edit.select_all()\nedit.delete()",
                    "copy lefter": "edit.extend_word_left()\nedit.copy()",
                    "copy righter": "edit.extend_word_right()\nedit.copy()",
                    "cut lefter": "edit.extend_word_left()\nedit.cut()",
                    "cut righter": "edit.extend_word_right()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "side dog": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
                    "<user.show_list> symbol [<user.text>] [halt]": "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")",
                    "problem show": "user.vscode(\"workbench.panel.markers.view.focus\")",
                    "low dog": "user.vscode(\"workbench.action.togglePanel\")",
                    "pan edit": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
                    "wrap dog": "user.vscode(\"editor.action.toggleWordWrap\")",
                    "disk ugly": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
                    "def show": "user.vscode(\"editor.action.revealDefinition\")",
                    "ref show": "user.vscode(\"references-view.find\")",
                    "(<user.teleport> declaration | follow)": "user.vscode(\"editor.action.revealDefinition\")",
                    "spring back": "user.vscode(\"workbench.action.navigateBack\")",
                    "spring forward": "user.vscode(\"workbench.action.navigateForward\")",
                    "<user.teleport> implementation": "user.vscode(\"editor.action.goToImplementation\")",
                    "<user.teleport> type": "user.vscode(\"editor.action.goToTypeDefinition\")",
                    "<user.teleport> usage": "user.vscode(\"references-view.find\")",
                    "<user.teleport> marks": "user.vscode(\"workbench.view.extension.bookmarks\")",
                    "<user.teleport> next mark": "user.vscode(\"bookmarks.jumpToNext\")",
                    "<user.teleport> last mark": "user.vscode(\"bookmarks.jumpToPrevious\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "step into": "user.vscode(\"workbench.action.debug.stepInto\")",
                    "term external": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
                    "term new": "user.vscode(\"workbench.action.terminal.new\")",
                    "term next": "user.vscode(\"workbench.action.terminal.focusNext\")",
                    "term last": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
                    "term split": "user.vscode(\"workbench.action.terminal.split\")",
                    "term zoom": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
                    "term trash": "user.vscode(\"workbench.action.terminal.kill\")",
                    "term dog": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
                    "term scroll up": "user.vscode(\"workbench.action.terminal.scrollUp\")",
                    "term scroll down": "user.vscode(\"workbench.action.terminal.scrollDown\")",
                    "term <number_small>": "user.vscode_terminal(number_small)",
                    "<user.select> less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "<user.select> (more|this)": "user.vscode(\"editor.action.smartSelect.expand\")",
                    "reload window": "user.vscode(\"workbench.action.reloadWindow\")",
                    "close window": "user.vscode(\"workbench.action.closeWindow\")",
                    "breed skip": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
                    "run head notebook": "user.vscode(\"jupyter.runallcellsabove.palette\")",
                    "show in finder": "user.vscode(\"revealFileInOS\")",
                    "format doc": "user.vscode(\"editor.action.formatDocument\")"
                }
            }
        ]
    },
    {
        "repo_id": 442458309,
        "user_id": 25511262,
        "timestamp": "2022-04-07T11:36:16.684620",
        "branch": "gaute-main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "brat": "b",
                    "dark": "d",
                    "far": "f",
                    "guest": "g",
                    "ink": "i",
                    "Jack": "j",
                    "Kate": "k",
                    "out": "o",
                    "sir": "s",
                    "verb": "v",
                    "well": "w",
                    "said": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "coal": ":",
                    "tick": "'",
                    "rub": ")",
                    "race": "}",
                    "piping": "|",
                    "bish": "\\",
                    "semi": ";"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 441560011,
        "user_id": 15986712,
        "timestamp": "2022-04-07T11:36:48.274387",
        "branch": "David_customization",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ana": "a",
                    "black": "b",
                    "clyde": "c",
                    "dany": "d",
                    "eric": "e",
                    "fox": "f",
                    "glen": "g",
                    "hank": "h",
                    "ivan": "i",
                    "jack": "j",
                    "kent": "k",
                    "luka": "l",
                    "mac": "m",
                    "nix": "n",
                    "opi": "o",
                    "pat": "p",
                    "quack": "q",
                    "rob": "r",
                    "sky": "s",
                    "tov": "t",
                    "usher": "u",
                    "vick": "v",
                    "west": "w",
                    "xi": "x",
                    "yug": "y",
                    "zoko": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "at": "alt",
                    "coun": "ctrl",
                    "con": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "ben": "enter",
                    "house": "home",
                    "movedown": "pagedown",
                    "moveup": "pageup",
                    "stek": "space",
                    "tep": "tab",
                    "suppress": "delete",
                    "scape": "escape"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "about": "~",
                    "exclamation": "!",
                    "underscore": "_",
                    "end paren": ")",
                    "end angle": ">",
                    "sterix": "*",
                    "hashkey": "#",
                    "hash key": "#",
                    "percen": "%",
                    "hat key": "^",
                    "hatkey": "^",
                    "quote bis": "\"",
                    "grave accent": "`",
                    "colony": ":",
                    "sterisk": "*",
                    "at key": "@"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "grave accent": "`",
                    "point": ".",
                    "colony": ":",
                    "sterisk": "*",
                    "hash key": "#",
                    "at key": "@"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "Fun one": "f1",
                    "Fun two": "f2",
                    "Fun three": "f3",
                    "Fun four": "f4",
                    "Fun five": "f5",
                    "Fun six": "f6",
                    "Fun seven": "f7",
                    "Fun eight": "f8",
                    "Fun nine": "f9",
                    "Fun decade": "f10",
                    "Fun eleven": "f11",
                    "Fun twelve": "f12"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertical": "user.split_window_vertically()",
                    "split (next | nex)": "user.split_next()",
                    "split (prev | pre)": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "move up | movup": "edit.page_up()",
                    "move down | movdown": "edit.page_down()",
                    "copy it": "edit.copy()",
                    "copyit": "edit.copy()",
                    "cudit": "edit.cut()",
                    "paste it": "edit.paste()",
                    "pastit": "edit.paste()",
                    "undo it | undoit": "edit.undo()",
                    "redo it": "edit.redo()",
                    "save|safe": "edit.save()",
                    "wesh": "key(backspace)",
                    "(indent)": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "soft <user.running_applications>": "user.switcher_focus(running_applications)",
                    "soft": "user.switcher_menu()"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "token <user.word>": "user.insert_formatted(user.word, \"NOOP\")"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "<number_small> time": "core.repeat_command(number_small)",
                    "twice": "core.repeat_command(1)",
                    "onetime|one time": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/cancel.talon",
                "context": "cancel",
                "commands": {
                    "nono": "skip()"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "desktop <number_small>": "user.desktop(number_small)",
                    "desktop next": "user.desktop_next()",
                    "desktop last": "user.desktop_last()",
                    "desktop show": "user.desktop_show()",
                    "window move desktop <number>": "user.window_move_desktop(number)",
                    "window move desktop left": "user.window_move_desktop_left()",
                    "window move _right": "user.window_move_desktop_right()"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tep left | tepleft": "app.tab_previous()",
                    "tep right | tepright": "app.tab_next()",
                    "tep new": "app.tab_open()",
                    "tep close | tepclose | tep plus | tepplus": "user.tab_close_wrapper()",
                    "tep (reopen)": "app.tab_reopen()",
                    "go tep <number>": "user.tab_jump(number)",
                    "go tep final": "user.tab_final()",
                    "tep duplicate": "user.tab_duplicate()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "click": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "<user.modifiers> click": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "duke": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "drag": "user.mouse_drag(0)\nuser.grid_close()",
                    "mouse down": "user.mouse_scroll_down()",
                    "mousedown": "user.mouse_scroll_down()",
                    "mousdown": "user.mouse_scroll_down()",
                    "mouse up": "user.mouse_scroll_up()",
                    "mouseup": "user.mouse_scroll_up()",
                    "mousup": "user.mouse_scroll_up()",
                    "wheel top": "user.mouse_scroll_up_continuous()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "(help formatters)": "user.help_formatters(user.get_formatters_words())"
                }
            },
            {
                "file": "modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "clear language": "user.code_clear_language_mode()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go home": "edit.line_start()",
                    "go end": "edit.line_end()"
                }
            },
            {
                "file": "modes/modes.talon",
                "context": "modes",
                "commands": {
                    "speak mode": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(triple grave | triple back tick )": "insert(\"```\")",
                    "direction": "\"->\"",
                    "direction bis": "\"=>\"",
                    "bit parent": "insert(\"()\")\nkey(left)",
                    "bit (bracket)": "insert(\"[]\")\nkey(left)",
                    "bit (brace)": "insert(\"{}\")\nkey(left)",
                    "bit percent": "insert(\"%%\")\nkey(left)",
                    "bit (quote)": "insert(\"''\")\nkey(left)",
                    "bit (quote bis)": "insert('\"\"')\nkey(left)",
                    "bit (back ticks)": "insert(\"``\")\nkey(left)",
                    "angle (that|dat)": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket) (that|dat)": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(brace) (that|dat)": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "paren (that|dat) | parenthat | parendat": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percen (that|dat) | percenthat| percendat": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote (that|dat)": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(quote bis) (that|dat)": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "( back tick) (that|dat)": "text = edit.selected_text()\nuser.paste('`{text}`')"
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "search": "user.find(\"\")",
                    "search <user.text>": "user.find(text)",
                    "search expression": "user.find_toggle_match_by_regex()",
                    "search next": "user.find_next()",
                    "search previous": "user.find_previous()",
                    "replace [<user.text>]": "user.replace(text or \"\")"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "move left": "edit.word_left()",
                    "move right": "edit.word_right()",
                    "left": "edit.left()",
                    "right": "edit.right()",
                    "up": "edit.up()",
                    "down": "edit.down()",
                    "ex line": "edit.select_line()",
                    "(ex all|exall)": "edit.select_all()",
                    "step left": "edit.extend_left()",
                    "step right": "edit.extend_right()",
                    "ex up": "edit.extend_line_up()",
                    "ex down": "edit.extend_line_down()",
                    "ex token": "edit.select_word()",
                    "ex left": "edit.extend_word_left()",
                    "ex right": "edit.extend_word_right()",
                    "ex house": "edit.extend_line_start()",
                    "ex end": "edit.extend_line_end()",
                    "ex way up": "edit.extend_file_start()",
                    "ex way down": "edit.extend_file_end()",
                    "clear token": "edit.delete_word()",
                    "clear house": "edit.extend_line_start()\nedit.delete()",
                    "clear end": "edit.extend_line_end()\nedit.delete()",
                    "copy token": "edit.select_word()\nedit.copy()",
                    "copy left": "edit.extend_word_left()\nedit.copy()",
                    "copy right": "edit.extend_word_right()\nedit.copy()",
                    "cut token": "edit.select_word()\nedit.cut()",
                    "cut left": "edit.extend_word_left()\nedit.cut()",
                    "cut right": "edit.extend_word_right()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "go address | goaddress": "browser.focus_address()",
                    "copy address | copyaddress": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "go forward | goforward": "browser.go_forward()",
                    "go back | goback": "browser.go_back()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(go parent)": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/jetbrains/jetbrains.talon",
                "context": "jetbrains",
                "commands": {
                    "find class": "user.idea(\"action GotoClass\")",
                    "find path": "user.idea(\"action FindInPath\")",
                    "find symbol": "user.idea(\"action GotoSymbol\")",
                    "find symbol <user.text>": "user.idea(\"action GotoSymbol\")\ninsert(text)\nkey(\"enter\")"
                }
            },
            {
                "file": "apps/generic_terminal/generic_terminal.talon",
                "context": "generic terminal",
                "commands": {
                    "liza": "user.terminal_list_directories()",
                    "liza all": "user.terminal_list_all_directories()",
                    "dir root": "user.terminal_change_directory_root()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube base[control]": "\"kubectl \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "mouse_grid/mouse_grid_always.talon",
                "context": "mouse grid always",
                "commands": {
                    "grid on": "user.grid_select_screen(1)\nuser.grid_activate()"
                }
            }
        ]
    },
    {
        "repo_id": 430310913,
        "user_id": 12608159,
        "timestamp": "2022-04-07T11:37:20.042736",
        "branch": "customizations",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 429930875,
        "user_id": 848589,
        "timestamp": "2022-04-07T11:37:51.710488",
        "branch": "user/dyancat",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ads": "a",
                    "bite": "b",
                    "dog": "d",
                    "house": "h",
                    "ivy": "i",
                    "jam": "j",
                    "name": "n",
                    "plant": "p",
                    "queen": "q",
                    "seek": "s",
                    "use": "u",
                    "vacuum": "v",
                    "week": "w"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "wipe": "backspace",
                    "junk": "backspace",
                    "tablet": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "brack": "{",
                    "left brack": "{",
                    "R brack": "}",
                    "right brack": "}"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "function one": "f1",
                    "function two": "f2",
                    "function three": "f3",
                    "function four": "f4",
                    "function five": "f5",
                    "function six": "f6",
                    "function seven": "f7",
                    "function eight": "f8",
                    "function nine": "f9",
                    "function ten": "f10",
                    "function eleven": "f11",
                    "function twelve": "f12"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "say <user.word>": "user.insert_formatted(user.word, \"NOOP\")"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple grave": "insert(\"```\")",
                    "(inside parens)": "insert(\"()\")\nkey(left)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "go parent": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 425184629,
        "user_id": 3219671,
        "timestamp": "2022-04-07T11:38:23.442423",
        "branch": "my-stuff",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "krunch": "k",
                    "ox": "o",
                    "rip": "r",
                    "urch": "u"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "ending": "end",
                    "clap": "enter",
                    "shave": "backspace",
                    "drill": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "single": "'",
                    "stack": ":",
                    "round": "(",
                    "rounder": ")",
                    "beam": "[",
                    "beamer": "]",
                    "wave": "{",
                    "waiver": "}",
                    "pack": "<",
                    "packer": ">",
                    "brow": "_",
                    "tender": "^",
                    "double": "\"",
                    "wink": ";",
                    "question": "?",
                    "score": "_"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "wink": ";",
                    "question": "?"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split move right": "user.split_window_right()",
                    "split move left": "user.split_window_left()",
                    "split move down": "user.split_window_down()",
                    "split move up": "user.split_window_up()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()",
                    "redo it": "edit.redo()",
                    "disk": "edit.save()",
                    "padding": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "phrase <user.text> then": "user.insert_formatted(text, \"NOOP\")",
                    "{user.prose_formatter} <user.prose> then": "user.insert_formatted(prose, prose_formatter)",
                    "<user.format_text>+ then": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "misc/cancel.talon",
                "context": "cancel",
                "commands": {
                    "then": "skip()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tabby": "app.tab_open()",
                    "puller": "app.tab_previous()",
                    "pusher": "app.tab_next()",
                    "closer": "user.tab_close_wrapper()",
                    "tab <number>": "user.tab_jump(number)",
                    "tab last": "user.tab_final()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "(drowse|trowse|trawse) [<phrase>]": "speech.disable()",
                    "jolt": "speech.enable()"
                }
            },
            {
                "file": "lang/vimscript/vimscript.talon",
                "context": "vimscript",
                "commands": {
                    "make command": "\"command! \"",
                    "make end if": "\"endif\"",
                    "make end for": "\"endfor\"",
                    "make end while": "\"endwhile\"",
                    "make end function": "\"endfunction\"",
                    "make continue": "\"continue\""
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "make comment": "\"// \"",
                    "make (funk | func | fun)": "\"func \"",
                    "make var": "\"var \"",
                    "make break": "\"break\"",
                    "make (chan | channel)": "\" chan \"",
                    "make go": "\"go \"",
                    "make if": "\"if \"",
                    "make else if": "\" else if \"",
                    "make else": "\" else \"",
                    "make while": "\"while \"",
                    "make for": "\"for \"",
                    "make for range": "\"forr \"",
                    "make format": "\"fmt\"",
                    "make switch": "\"switch \"",
                    "make select": "\"select \"",
                    "make (const | constant)": "\" const \"",
                    "make case": "\" case \"",
                    "make default": "\" default:\"",
                    "make type": "\" type \"",
                    "make true": "\" true \"",
                    "make false": "\" false \"",
                    "make (start | struct | struck)": "insert(\" struct {\")\nkey(\"enter\")",
                    "make interface": "insert(\" interface {\")\nkey(\"enter\")",
                    "make string": "\" string \"",
                    "make slice": "\" []\"",
                    "make (int | integer | ant) 64": "\" int64 \"",
                    "make return": "\" return \"",
                    "make (air | err)": "\"err\""
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "make (def | deaf | deft)": "\"def \"",
                    "make try": "\"try:\\n\"",
                    "make except": "\"except \"",
                    "make raise": "\"raise \"",
                    "make past": "\"pass\""
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/r/r.talon",
                "context": "r",
                "commands": {
                    "is in": "\" %in% \"",
                    "make na": "insert(\"NA\")"
                }
            },
            {
                "file": "lang/java/java.talon",
                "context": "java",
                "commands": {
                    "make array": "user.code_operator_subscript()",
                    "make new": "insert(\"new \")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "make (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/object_oriented.talon",
                "context": "object oriented",
                "commands": {
                    "make self": "user.code_self()",
                    "make class": "user.code_define_class()"
                }
            },
            {
                "file": "lang/tags/data_bool.talon",
                "context": "data bool",
                "commands": {
                    "make true": "user.code_insert_true()",
                    "make false": "user.code_insert_false()"
                }
            },
            {
                "file": "lang/tags/operators_lambda.talon",
                "context": "operators lambda",
                "commands": {
                    "make lambda": "user.code_operator_lambda()"
                }
            },
            {
                "file": "lang/tags/operators_array.talon",
                "context": "operators array",
                "commands": {
                    "make subscript": "user.code_operator_subscript()"
                }
            },
            {
                "file": "lang/tags/operators_math.talon",
                "context": "operators math",
                "commands": {
                    "make (minus | subtract)": "user.code_operator_subtraction()",
                    "make (plus | add)": "user.code_operator_addition()",
                    "make (times | multiply)": "user.code_operator_multiplication()",
                    "make divide": "user.code_operator_division()",
                    "make mod": "user.code_operator_modulo()",
                    "(make (power | exponent) | to the power [of])": "user.code_operator_exponent()",
                    "is equal": "user.code_operator_equal()",
                    "is not equal": "user.code_operator_not_equal()",
                    "is (greater | more)": "user.code_operator_greater_than()",
                    "is (less | below) [than]": "user.code_operator_less_than()",
                    "is greater [than] or equal": "user.code_operator_greater_than_or_equal_to()",
                    "is less [than] or equal": "user.code_operator_less_than_or_equal_to()",
                    "(make | logical) and": "user.code_operator_and()",
                    "(make | logical) or": "user.code_operator_or()",
                    "(make | pad) colon": "\" : \""
                }
            },
            {
                "file": "lang/tags/libraries.talon",
                "context": "libraries",
                "commands": {
                    "make import": "user.code_import()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "lang/tags/operators_assignment.talon",
                "context": "operators assignment",
                "commands": {
                    "make (equal | assign)": "user.code_operator_assignment()",
                    "make (minus | subtract) equal": "user.code_operator_subtraction_assignment()",
                    "make (plus | add) equals": "user.code_operator_addition_assignment()",
                    "make (times | multiply) equals": "user.code_operator_multiplication_assignment()",
                    "make divide equals": "user.code_operator_division_assignment()",
                    "make mod equals": "user.code_operator_modulo_assignment()",
                    "[make] increment": "user.code_operator_increment()",
                    "(make | logical | bitwise) (ex | exclusive) or equals": "user.code_operator_bitwise_exclusive_or_equals()",
                    "[(make | logical | bitwise)] (left shift | shift left) equals": "user.code_operator_bitwise_left_shift_equals()",
                    "[(make | logical | bitwise)] (left right | shift right) equals": "user.code_operator_bitwise_right_shift_equals()"
                }
            },
            {
                "file": "lang/tags/imperative.talon",
                "context": "imperative",
                "commands": {
                    "make if": "user.code_state_if()",
                    "make else if": "user.code_state_else_if()",
                    "make else": "user.code_state_else()",
                    "make while": "user.code_state_while()",
                    "make for": "user.code_state_for()",
                    "make for in": "user.code_state_for_each()",
                    "make switch": "user.code_state_switch()",
                    "make case": "user.code_state_case()",
                    "make do": "user.code_state_do()",
                    "make goto": "user.code_state_go_to()",
                    "make return": "user.code_state_return()",
                    "make break": "user.code_break()",
                    "make next": "user.code_next()"
                }
            },
            {
                "file": "lang/tags/operators_bitwise.talon",
                "context": "operators bitwise",
                "commands": {
                    "(make | logical | bitwise) (ex | exclusive) or": "user.code_operator_bitwise_exclusive_or()",
                    "(make | logical | bitwise) (left shift | shift left)": "user.code_operator_bitwise_left_shift()",
                    "(make | logical | bitwise) (right shift | shift right)": "user.code_operator_bitwise_right_shift()"
                }
            },
            {
                "file": "lang/tags/operators_pointer.talon",
                "context": "operators pointer",
                "commands": {
                    "make dereference": "user.code_operator_indirection()",
                    "make address of": "user.code_operator_address_of()",
                    "make arrow": "user.code_operator_structure_dereference()"
                }
            },
            {
                "file": "lang/javascript/javascript.talon",
                "context": "javascript",
                "commands": {
                    "is strict equal": "\" === \"",
                    "is strict not equal": "\" !== \"",
                    "make const": "\"const \"",
                    "make let": "\"let \"",
                    "make var": "\"var \"",
                    "make export": "\"export \"",
                    "make async": "\"async \"",
                    "make await": "\"await \"",
                    "make spread": "\"...\""
                }
            },
            {
                "file": "lang/c/c.talon",
                "context": "c",
                "commands": {
                    "make include": "insert('#include ')",
                    "make type deaf": "insert('typedef ')",
                    "make type deaf struct": "insert('typedef struct')\ninsert('{\\n\\n}')\nedit.up()\nkey('tab')",
                    "make define": "\"#define \"",
                    "make undefine": "\"#undef \"",
                    "make if define": "\"#ifdef \"",
                    "make pre if": "\"#if \"",
                    "make error": "\"#error \"",
                    "make pre else if": "\"#elif \"",
                    "make pre end": "\"#endif \"",
                    "make pragma": "\"#pragma \"",
                    "make default": "\"default:\\nbreak;\""
                }
            },
            {
                "file": "lang/ruby/ruby.talon",
                "context": "ruby",
                "commands": {
                    "make end": "\"end\"",
                    "make begin": "\"begin\"",
                    "make rescue": "\"rescue \"",
                    "make module": "\"module \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(comma and | spam)": "\", \"",
                    "new liner": "\"\\\\n\"",
                    "inside paren": "insert(\"()\")\nkey(left)",
                    "inside brack": "insert(\"[]\")\nkey(left)",
                    "inside brace": "insert(\"{}\")\nkey(left)",
                    "angle it": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "brack it": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "brace it": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "paren it": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent it": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote it": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "double it": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "(grave | back tick) it": "text = edit.selected_text()\nuser.paste('`{text}`')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "pets": "edit.word_left()",
                    "step": "edit.word_right()",
                    "west": "edit.left()",
                    "east": "edit.right()",
                    "north": "edit.up()",
                    "south": "edit.down()",
                    "bend": "edit.line_start()",
                    "lend": "edit.line_end()",
                    "lend all": "edit.line_start()\nedit.line_start()",
                    "cleft": "edit.extend_word_left()\nedit.delete()",
                    "crimp": "edit.extend_word_right()\nedit.delete()",
                    "cleft all": "edit.extend_line_start()\nedit.delete()",
                    "crimp all": "edit.extend_line_end()\nedit.delete()"
                }
            },
            {
                "file": "lang/terraform/terraform.talon",
                "context": "terraform (lang)",
                "commands": {
                    "make {user.terraform_module_block}": "user.code_terraform_module_block(user.terraform_module_block)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "go forward": "browser.go_forward()"
                }
            },
            {
                "file": "apps/i3wm/i3wm.talon",
                "context": "i3wm",
                "commands": {
                    "(bay flip|flip)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "bay right": "user.system_command(\"i3-msg workspace next\")",
                    "bay left": "user.system_command(\"i3-msg workspace prev\")",
                    "glide": "user.system_command(\"i3-msg focus right\")",
                    "slide": "user.system_command(\"i3-msg focus left\")",
                    "win close": "user.system_command(\"i3-msg kill\")",
                    "win stacking": "user.system_command(\"i3-msg layout stacking\")",
                    "win default": "user.system_command(\"i3-msg layout toggle split\")",
                    "win tabbed": "user.system_command(\"i3-msg layout tabbed\")",
                    "shuffle": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "win horizontal": "user.system_command(\"i3-msg split h\")",
                    "win vertical": "user.system_command(\"i3-msg split v\")",
                    "(launch shell|Shelley)": "user.i3wm_shell()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "split reset": "user.vscode(\"workbench.action.evenEditorWidths\")",
                    "toggle wrap": "user.vscode(\"editor.action.toggleWordWrap\")"
                }
            }
        ]
    },
    {
        "repo_id": 422560443,
        "user_id": 6410431,
        "timestamp": "2022-04-07T11:43:52.999556",
        "branch": "mzizzi",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "smote": "'",
                    "eek": "=",
                    "skid": "_",
                    "circle": "(",
                    "clamp": ")",
                    "lace": "{",
                    "race": "}",
                    "langle": "<",
                    "wrangle": ">",
                    "splat": "*",
                    "wink": ";",
                    "stack": ":"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()",
                    "disk": "edit.save()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "toby": "user.mouse_toggle_control_mouse()",
                    "zoom toby": "user.mouse_toggle_zoom_mouse()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "wake up all": "user.mouse_wake()\nuser.history_enable()\nuser.talon_mode()",
                    "snore all [<phrase>]": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "snore [<phrase>]": "speech.disable()",
                    "wake up": "speech.enable()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/operators_lambda.talon",
                "context": "operators lambda",
                "commands": {
                    "lambda": "user.code_operator_lambda()"
                }
            },
            {
                "file": "lang/tags/operators_array.talon",
                "context": "operators array",
                "commands": {
                    "subscript": "user.code_operator_subscript()"
                }
            },
            {
                "file": "lang/tags/operators_math.talon",
                "context": "operators math",
                "commands": {
                    "(minus | subtract)": "user.code_operator_subtraction()",
                    "(plus | add)": "user.code_operator_addition()",
                    "(times | multiply)": "user.code_operator_multiplication()",
                    "divide": "user.code_operator_division()",
                    "modulo": "user.code_operator_modulo()",
                    "((power | exponent) | to the power [of])": "user.code_operator_exponent()",
                    "is equal": "user.code_operator_equal()",
                    "is not equal": "user.code_operator_not_equal()",
                    "is (greater | more)": "user.code_operator_greater_than()",
                    "is (less | below) [than]": "user.code_operator_less_than()",
                    "is greater [than] or equal": "user.code_operator_greater_than_or_equal_to()",
                    "is less [than] or equal": "user.code_operator_less_than_or_equal_to()",
                    "logical and": "user.code_operator_and()",
                    "logical or": "user.code_operator_or()",
                    "pad colon": "\" : \""
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "lang/tags/operators_assignment.talon",
                "context": "operators assignment",
                "commands": {
                    "assign": "user.code_operator_assignment()",
                    "(minus | subtract) equals": "user.code_operator_subtraction_assignment()",
                    "(plus | add) equals": "user.code_operator_addition_assignment()",
                    "(times | multiply) equals": "user.code_operator_multiplication_assignment()",
                    "divide equals": "user.code_operator_division_assignment()",
                    "mod equals": "user.code_operator_modulo_assignment()",
                    "increment": "user.code_operator_increment()",
                    "(logical | bitwise) (ex | exclusive) or equals": "user.code_operator_bitwise_exclusive_or_equals()",
                    "[(ogical | bitwise)] (left shift | shift left) equals": "user.code_operator_bitwise_left_shift_equals()",
                    "[(logical | bitwise)] (left right | shift right) equals": "user.code_operator_bitwise_right_shift_equals()"
                }
            },
            {
                "file": "lang/tags/operators_pointer.talon",
                "context": "operators pointer",
                "commands": {
                    "dereference": "user.code_operator_indirection()",
                    "address of": "user.code_operator_address_of()",
                    "arrow": "user.code_operator_structure_dereference()"
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "seek": "user.find(\"\")",
                    "seek <user.text>": "user.find(text)",
                    "seek all": "user.find_everywhere(\"\")",
                    "seek all <user.text>": "user.find_everywhere(text)",
                    "seek case": "user.find_toggle_match_by_case()",
                    "seek word": "user.find_toggle_match_by_word()",
                    "seek expression": "user.find_toggle_match_by_regex()",
                    "seek next": "user.find_next()",
                    "seek previous": "user.find_previous()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "left": "edit.left()",
                    "right": "edit.right()",
                    "up": "edit.up()",
                    "down": "edit.down()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 420491244,
        "user_id": 23173985,
        "timestamp": "2022-04-07T11:49:13.818651",
        "branch": "vivshaw-talon-scripts",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 420281023,
        "user_id": 717852,
        "timestamp": "2022-04-07T11:49:46.087876",
        "branch": "bkd/mouse_commands",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 419531730,
        "user_id": 71795669,
        "timestamp": "2022-04-07T11:50:18.212214",
        "branch": "grant",
        "command_groups": [
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "hey (grant | michele)": "speech.disable()",
                    "stop listening": "speech.disable()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 413320713,
        "user_id": 5217684,
        "timestamp": "2022-04-07T11:50:50.425620",
        "branch": "bn",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 410395641,
        "user_id": 21588,
        "timestamp": "2022-04-07T11:51:22.913008",
        "branch": "gh-trimmed",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 410395641,
        "user_id": 21588,
        "timestamp": "2022-04-07T11:51:53.051476",
        "branch": "ghouston-master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ivy": "i"
                }
            },
            {
                "file": "apps/teams/teams_mac.talon",
                "context": "teams mac",
                "commands": {
                    "toggle (video | camera)": "key(super-shift-o)"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 403757096,
        "user_id": 51184,
        "timestamp": "2022-04-07T11:52:25.662197",
        "branch": "pavel",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arc": "a",
                    "byte": "b",
                    "cad": "c",
                    "yes": "e",
                    "hook": "h",
                    "like": "l",
                    "oba": "o",
                    "pope": "p",
                    "quiz": "q",
                    "sink": "s",
                    "ura": "u",
                    "xman": "x",
                    "why": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.number_key",
                "commands": {
                    "ait": "8"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "did": "enter",
                    "junk": "backspace",
                    "dab": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "under": "_",
                    "baren": "(",
                    "dupquote": "\"",
                    "dudot": ":"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.arrow_key",
                "commands": {
                    "in": "down",
                    "past": "left",
                    "next": "right",
                    "out": "up"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "dudot": ":"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "F aid": "f8"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy it": "edit.copy()",
                    "cut it": "edit.cut()",
                    "paste it": "edit.paste()",
                    "nedo": "edit.undo()",
                    "redo it": "edit.redo()",
                    "(file save | save it | saveit)": "edit.save()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "end drag | drag stop": "user.mouse_drag_end()",
                    "downer": "user.mouse_scroll_down_continuous()",
                    "wheel stop | mouse stop": "user.mouse_scroll_stop()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "go sleep [<phrase>]": "speech.disable()",
                    "wake up": "speech.enable()"
                }
            },
            {
                "file": "apps/jetbrains/jetbrains.talon",
                "context": "jetbrains",
                "commands": {
                    "run debug": "user.idea(\"action DebugClass\")"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "format it": "user.vscode(\"editor.action.formatDocument\")",
                    "rename it": "user.vscode(\"editor.action.rename\")",
                    "refactor it": "user.vscode(\"editor.action.refactor\")",
                    "fold it": "user.vscode(\"editor.fold\")",
                    "blow it": "user.vscode(\"editor.unfold\")",
                    "blow those": "user.vscode(\"editor.unfoldRecursively\")",
                    "blow all": "user.vscode(\"editor.unfoldAll\")"
                }
            }
        ]
    },
    {
        "repo_id": 403741487,
        "user_id": 38996442,
        "timestamp": "2022-04-07T11:52:57.324045",
        "branch": "ajy",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 403741487,
        "user_id": 38996442,
        "timestamp": "2022-04-07T11:53:27.454772",
        "branch": "ajy2",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "void": "space",
                    "pace": "space"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(copy that|borrow [that])": "edit.copy()",
                    "((cut|clip) that|steal [that])": "edit.cut()",
                    "(paste that|glue [that])": "edit.paste()",
                    "(undo that|wind)": "edit.undo()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "(clear word left|pop)": "edit.extend_word_left()\nedit.delete()",
                    "(clear word right|sop)": "edit.extend_word_right()\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 401085077,
        "user_id": 20683271,
        "timestamp": "2022-04-07T11:53:59.172858",
        "branch": "eli/tweaks",
        "command_groups": []
    },
    {
        "repo_id": 392454405,
        "user_id": 22085373,
        "timestamp": "2022-04-07T11:54:31.272001",
        "branch": "luis",
        "command_groups": []
    },
    {
        "repo_id": 391098151,
        "user_id": 56436734,
        "timestamp": "2022-04-07T11:55:02.982203",
        "branch": "ViacheslavKudinov-patch-1",
        "command_groups": []
    },
    {
        "repo_id": 391098151,
        "user_id": 56436734,
        "timestamp": "2022-04-07T11:55:33.071235",
        "branch": "ViacheslavKudinov-patch-2",
        "command_groups": []
    },
    {
        "repo_id": 386678509,
        "user_id": 220967,
        "timestamp": "2022-04-07T11:56:04.776045",
        "branch": "vadim_personal",
        "command_groups": []
    },
    {
        "repo_id": 385110154,
        "user_id": 225847,
        "timestamp": "2022-04-07T11:56:36.269286",
        "branch": "mine",
        "command_groups": []
    },
    {
        "repo_id": 362210081,
        "user_id": 7584665,
        "timestamp": "2022-04-07T11:57:07.623012",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 356743718,
        "user_id": 9221501,
        "timestamp": "2022-04-07T11:57:39.073237",
        "branch": "shawnp/custom",
        "command_groups": []
    },
    {
        "repo_id": 354618162,
        "user_id": 536668,
        "timestamp": "2022-04-07T11:58:10.624749",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 353659759,
        "user_id": 22653028,
        "timestamp": "2022-04-07T11:58:42.183717",
        "branch": "bietola-personal",
        "command_groups": []
    },
    {
        "repo_id": 349466138,
        "user_id": 39571771,
        "timestamp": "2022-04-07T11:59:13.652477",
        "branch": "ark",
        "command_groups": []
    },
    {
        "repo_id": 348665193,
        "user_id": 29524288,
        "timestamp": "2022-04-07T12:04:43.091302",
        "branch": "jay51",
        "command_groups": []
    },
    {
        "repo_id": 348395788,
        "user_id": 1656493,
        "timestamp": "2022-04-07T12:05:14.604201",
        "branch": "custom",
        "command_groups": []
    },
    {
        "repo_id": 348395788,
        "user_id": 1656493,
        "timestamp": "2022-04-07T12:10:42.315207",
        "branch": "custom-07092021",
        "command_groups": []
    },
    {
        "repo_id": 344305692,
        "user_id": 9664877,
        "timestamp": "2022-04-07T12:16:11.308355",
        "branch": "cz",
        "command_groups": []
    },
    {
        "repo_id": 342293729,
        "user_id": 9314305,
        "timestamp": "2022-04-07T12:16:42.682061",
        "branch": "my-talon",
        "command_groups": []
    },
    {
        "repo_id": 339033346,
        "user_id": 68754523,
        "timestamp": "2022-04-07T12:22:11.850672",
        "branch": "amongus",
        "command_groups": []
    },
    {
        "repo_id": 336413925,
        "user_id": 15655308,
        "timestamp": "2022-04-07T12:27:41.149157",
        "branch": "1-aedison-working-branch",
        "command_groups": []
    },
    {
        "repo_id": 336413925,
        "user_id": 15655308,
        "timestamp": "2022-04-07T12:28:11.247362",
        "branch": "aedison-working",
        "command_groups": []
    },
    {
        "repo_id": 326731774,
        "user_id": 4630670,
        "timestamp": "2022-04-07T12:33:40.196271",
        "branch": "custom",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "golf": "g",
                    "icon": "i",
                    "peter": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "exit": "escape",
                    "blank": "space"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 325631725,
        "user_id": 1474758,
        "timestamp": "2022-04-07T12:39:09.307055",
        "branch": "hellsan631/changes",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 325623187,
        "user_id": 1390086,
        "timestamp": "2022-04-07T12:39:40.724027",
        "branch": "mine",
        "command_groups": [
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git commit all": "\"git commit -a\\n\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2022-04-07T12:45:10.492267",
        "branch": "create-spoken-forms",
        "command_groups": [
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            }
        ]
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2022-04-07T12:46:07.278947",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "kick": "k",
                    "oats": "o",
                    "risk": "r",
                    "spun": "s",
                    "york": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.number_key",
                "commands": {
                    "bubbles": "8"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "many": "cmd",
                    "troll": "ctrl",
                    "ship": "shift"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter",
                    "drill": "delete",
                    "chuck": "backspace",
                    "scratch": "backspace",
                    "scrape": "escape",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "brick": "`",
                    "stroke": "/",
                    "backstroke": "\\",
                    "equal": "=",
                    "score": "_",
                    "quest": "?",
                    "single": "'",
                    "double": "\"",
                    "leper": "(",
                    "repper": ")",
                    "lacker": "[",
                    "racker": "]",
                    "lacer": "{",
                    "racer": "}",
                    "langle": "<",
                    "wrangle": ">",
                    "snow": "*",
                    "percy": "%",
                    "tangle": "^",
                    "semi": ";",
                    "stack": ":",
                    "drip": ","
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "fun one": "f1",
                    "fun two": "f2",
                    "fun three": "f3",
                    "fun four": "f4",
                    "fun five": "f5",
                    "fun six": "f6",
                    "fun seven": "f7",
                    "fun eight": "f8",
                    "fun nine": "f9",
                    "fun ten": "f10",
                    "fun eleven": "f11",
                    "fun twelve": "f12"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            }
        ]
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2022-04-07T12:46:37.350957",
        "branch": "paul-jones",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "kick": "k",
                    "ox": "o",
                    "risk": "r",
                    "spun": "s"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "many": "cmd",
                    "troll": "ctrl",
                    "ship": "shift"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter",
                    "drill": "delete",
                    "chuck": "backspace",
                    "scratch": "backspace",
                    "scrape": "escape",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "brick": "`",
                    "stroke": "/",
                    "backstroke": "\\",
                    "equal": "=",
                    "score": "_",
                    "quest": "?",
                    "single": "'",
                    "double": "\"",
                    "leper": "(",
                    "repper": ")",
                    "lack": "[",
                    "rack": "]",
                    "lace": "{",
                    "race": "}",
                    "langle": "<",
                    "wrangle": ">",
                    "snow": "*",
                    "percy": "%",
                    "tangle": "^",
                    "semi": ";",
                    "stack": ":",
                    "drip": ","
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "fun one": "f1",
                    "fun two": "f2",
                    "fun three": "f3",
                    "fun four": "f4",
                    "fun five": "f5",
                    "fun six": "f6",
                    "fun seven": "f7",
                    "fun eight": "f8",
                    "fun nine": "f9",
                    "fun ten": "f10",
                    "fun eleven": "f11",
                    "fun twelve": "f12"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "side dog": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
                    "<user.show_list> symbol [<user.text>] [halt]": "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")",
                    "problem show": "user.vscode(\"workbench.panel.markers.view.focus\")",
                    "low dog": "user.vscode(\"workbench.action.togglePanel\")",
                    "pan edit": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
                    "wrap dog": "user.vscode(\"editor.action.toggleWordWrap\")",
                    "disk ugly": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
                    "def show": "user.vscode(\"editor.action.revealDefinition\")",
                    "ref show": "user.vscode(\"references-view.find\")",
                    "(<user.teleport> declaration | follow)": "user.vscode(\"editor.action.revealDefinition\")",
                    "spring back": "user.vscode(\"workbench.action.navigateBack\")",
                    "spring forward": "user.vscode(\"workbench.action.navigateForward\")",
                    "<user.teleport> implementation": "user.vscode(\"editor.action.goToImplementation\")",
                    "<user.teleport> type": "user.vscode(\"editor.action.goToTypeDefinition\")",
                    "<user.teleport> usage": "user.vscode(\"references-view.find\")",
                    "<user.teleport> marks": "user.vscode(\"workbench.view.extension.bookmarks\")",
                    "<user.teleport> next mark": "user.vscode(\"bookmarks.jumpToNext\")",
                    "<user.teleport> last mark": "user.vscode(\"bookmarks.jumpToPrevious\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "step into": "user.vscode(\"workbench.action.debug.stepInto\")",
                    "term external": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
                    "term new": "user.vscode(\"workbench.action.terminal.new\")",
                    "term next": "user.vscode(\"workbench.action.terminal.focusNext\")",
                    "term last": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
                    "term split": "user.vscode(\"workbench.action.terminal.split\")",
                    "term zoom": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
                    "term trash": "user.vscode(\"workbench.action.terminal.kill\")",
                    "term dog": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
                    "term scroll up": "user.vscode(\"workbench.action.terminal.scrollUp\")",
                    "term scroll down": "user.vscode(\"workbench.action.terminal.scrollDown\")",
                    "term <number_small>": "user.vscode_terminal(number_small)",
                    "<user.select> less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "<user.select> (more|this)": "user.vscode(\"editor.action.smartSelect.expand\")",
                    "reload window": "user.vscode(\"workbench.action.reloadWindow\")",
                    "close window": "user.vscode(\"workbench.action.closeWindow\")",
                    "breed skip": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
                    "run head notebook": "user.vscode(\"jupyter.runallcellsabove.palette\")",
                    "show in finder": "user.vscode(\"revealFileInOS\")",
                    "format doc": "user.vscode(\"editor.action.formatDocument\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(pace | paste) that": "edit.paste()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "padding": "insert(\"  \")\nkey(left)",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "<user.format_text>": "user.insert_many(format_text_list)",
                    "<user.format_text> halt": "user.insert_many(format_text_list)",
                    "strict <user.format_text>": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "breed": "user.multi_cursor_select_more_occurrences()",
                    "breed all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_scroll_up()",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "<user.operator> comment": "\"// \"",
                    "<user.operator> (funk | func | fun)": "\"func \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> break": "\"break\"",
                    "<user.operator> (chan | channel)": "\" chan \"",
                    "<user.operator> go": "\"go \"",
                    "<user.operator> if": "\"if \"",
                    "<user.operator> else if": "\" else if \"",
                    "<user.operator> else": "\" else \"",
                    "<user.operator> while": "\"while \"",
                    "<user.operator> for": "\"for \"",
                    "<user.operator> for range": "\"forr \"",
                    "<user.operator> format": "\"fmt\"",
                    "<user.operator> switch": "\"switch \"",
                    "<user.operator> select": "\"select \"",
                    "<user.operator> (const | constant)": "\" const \"",
                    "<user.operator> case": "\" case \"",
                    "<user.operator> default": "\" default:\"",
                    "<user.operator> type": "\" type \"",
                    "<user.operator> true": "\" true \"",
                    "<user.operator> false": "\" false \"",
                    "<user.operator> (start | struct | struck)": "insert(\" struct {\")\nkey(\"enter\")",
                    "<user.operator> interface": "insert(\" interface {\")\nkey(\"enter\")",
                    "<user.operator> string": "\" string \"",
                    "<user.operator> slice": "\" []\"",
                    "<user.operator> (int | integer | ant) 64": "\" int64 \"",
                    "<user.operator> return": "\" return \"",
                    "<user.operator> (air | err)": "\"err\""
                }
            },
            {
                "file": "lang/vimscript/vimscript.talon",
                "context": "vimscript",
                "commands": {
                    "<user.operator> command": "\"command! \"",
                    "<user.operator> end if": "\"endif\"",
                    "<user.operator> end for": "\"endfor\"",
                    "<user.operator> end while": "\"endwhile\"",
                    "<user.operator> end function": "\"endfunction\"",
                    "<user.operator> continue": "\"continue\""
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "<user.operator> (def | deaf | deft)": "\"def \"",
                    "<user.operator> try": "\"try:\\n\"",
                    "<user.operator> except": "\"except \"",
                    "<user.operator> raise": "\"raise \"",
                    "<user.operator> past": "\"pass\""
                }
            },
            {
                "file": "lang/r/r.talon",
                "context": "r",
                "commands": {
                    "<user.operator> na": "insert(\"NA\")"
                }
            },
            {
                "file": "lang/javascript/javascript.talon",
                "context": "javascript",
                "commands": {
                    "<user.operator> const": "\"const \"",
                    "<user.operator> let": "\"let \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> async": "\"async \"",
                    "<user.operator> await": "\"await \"",
                    "<user.operator> spread": "\"...\""
                }
            },
            {
                "file": "lang/c/c.talon",
                "context": "c",
                "commands": {
                    "<user.operator> define": "\"#define \"",
                    "<user.operator> undefine": "\"#undef \"",
                    "<user.operator> if define": "\"#ifdef \"",
                    "<user.operator> pre if": "\"#if \"",
                    "<user.operator> error": "\"#error \"",
                    "<user.operator> pre else if": "\"#elif \"",
                    "<user.operator> pre end": "\"#endif \"",
                    "<user.operator> pragma": "\"#pragma \"",
                    "<user.operator> default": "\"default:\\nbreak;\""
                }
            },
            {
                "file": "lang/ruby/ruby.talon",
                "context": "ruby",
                "commands": {
                    "<user.operator> end": "\"end\"",
                    "<user.operator> begin": "\"begin\"",
                    "<user.operator> rescue": "\"rescue \"",
                    "<user.operator> module": "\"module \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "pebbles": "\"...\"",
                    "spam": "\", \"",
                    "quad": "'\"\"'\nkey(left)",
                    "twin": "\"''\"\nkey(left)",
                    "escaped quad": "'\\\\\"\\\\\"'\nkey(left)\nkey(left)",
                    "escaped twin": "\"\\\\'\\\\'\"\nkey(left)\nkey(left)",
                    "round": "insert(\"()\")\nkey(left)",
                    "square": "insert(\"[]\")\nkey(left)",
                    "curly": "insert(\"{}\")\nkey(left)",
                    "(diamond | angle) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(curly | lace) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(round | leper) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(double | quad) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(single | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "<user.find> case": "user.find_toggle_match_by_case()",
                    "<user.find> word": "user.find_toggle_match_by_word()",
                    "<user.find> expression": "user.find_toggle_match_by_regex()",
                    "<user.find> next": "user.find_next()",
                    "<user.find> previous": "user.find_previous()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "dedent that": "edit.indent_less()",
                    "drag line down": "edit.line_swap_down()",
                    "drag line up": "edit.line_swap_up()",
                    "smear (line|that)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "tug": "edit.left()",
                    "drain": "edit.word_left()",
                    "push": "edit.right()",
                    "step": "edit.word_right()",
                    "head": "edit.line_start()",
                    "tail": "edit.line_end()",
                    "<user.select> lefter": "edit.extend_word_left()",
                    "<user.select> writer": "edit.extend_word_right()",
                    "take head": "edit.extend_line_start()",
                    "take tail": "edit.extend_line_end()",
                    "<user.delete> up": "edit.extend_line_up()\nedit.delete()",
                    "<user.delete> down": "edit.extend_line_down()\nedit.delete()",
                    "<user.delete> word": "edit.delete_word()",
                    "<user.delete> head": "edit.extend_line_start()\nedit.delete()",
                    "<user.delete> tail": "edit.extend_line_end()\nedit.delete()",
                    "<user.delete> way up": "edit.extend_file_start()\nedit.delete()",
                    "<user.delete> way down": "edit.extend_file_end()\nedit.delete()",
                    "<user.delete> all": "edit.select_all()\nedit.delete()",
                    "copy lefter": "edit.extend_word_left()\nedit.copy()",
                    "copy righter": "edit.extend_word_right()\nedit.copy()",
                    "cut lefter": "edit.extend_word_left()\nedit.cut()",
                    "cut righter": "edit.extend_word_right()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 324636743,
        "user_id": 1121562,
        "timestamp": "2022-04-07T12:47:08.910296",
        "branch": "vocab-symbols",
        "command_groups": []
    },
    {
        "repo_id": 317919444,
        "user_id": 74801510,
        "timestamp": "2022-04-07T12:47:40.272423",
        "branch": "customization",
        "command_groups": []
    },
    {
        "repo_id": 317919444,
        "user_id": 74801510,
        "timestamp": "2022-04-07T12:48:10.321730",
        "branch": "customization3",
        "command_groups": []
    },
    {
        "repo_id": 317186209,
        "user_id": 48803018,
        "timestamp": "2022-04-07T12:48:41.917541",
        "branch": "custom",
        "command_groups": [
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "clicker": "mouse_click(1)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 315437621,
        "user_id": 540820,
        "timestamp": "2022-04-07T12:49:12.989986",
        "branch": "mine",
        "command_groups": [
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "clicker": "mouse_click(1)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 314792396,
        "user_id": 35661160,
        "timestamp": "2022-04-07T12:49:44.136269",
        "branch": "geeogi",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)"
                }
            }
        ]
    },
    {
        "repo_id": 313348019,
        "user_id": 30940553,
        "timestamp": "2022-04-07T12:50:15.433307",
        "branch": "vocab-symbols",
        "command_groups": [
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            }
        ]
    },
    {
        "repo_id": 313148859,
        "user_id": 13286932,
        "timestamp": "2022-04-07T12:50:46.731703",
        "branch": "vocab-symbols",
        "command_groups": []
    },
    {
        "repo_id": 311713270,
        "user_id": 5415776,
        "timestamp": "2022-04-07T12:51:18.004396",
        "branch": "rd",
        "command_groups": []
    },
    {
        "repo_id": 311626284,
        "user_id": 17849478,
        "timestamp": "2022-04-07T12:51:49.974078",
        "branch": "wolle_personal",
        "command_groups": []
    },
    {
        "repo_id": 311626284,
        "user_id": 17849478,
        "timestamp": "2022-04-07T12:52:20.073708",
        "branch": "wolle",
        "command_groups": []
    },
    {
        "repo_id": 308749794,
        "user_id": 391217,
        "timestamp": "2022-04-07T12:52:51.402761",
        "branch": "mine",
        "command_groups": []
    },
    {
        "repo_id": 308083280,
        "user_id": 6002123,
        "timestamp": "2022-04-07T12:53:22.627735",
        "branch": "terry",
        "command_groups": []
    },
    {
        "repo_id": 307748026,
        "user_id": 46014,
        "timestamp": "2022-04-07T12:53:53.824526",
        "branch": "rubymine",
        "command_groups": []
    },
    {
        "repo_id": 306233873,
        "user_id": 102322,
        "timestamp": "2022-04-07T12:54:25.301759",
        "branch": "joeversion",
        "command_groups": []
    },
    {
        "repo_id": 303114508,
        "user_id": 10352319,
        "timestamp": "2022-04-07T12:54:57.020055",
        "branch": "jp",
        "command_groups": []
    },
    {
        "repo_id": 296696991,
        "user_id": 29872150,
        "timestamp": "2022-04-07T12:55:28.344645",
        "branch": "jessica",
        "command_groups": []
    },
    {
        "repo_id": 291175756,
        "user_id": 69595,
        "timestamp": "2022-04-07T12:55:59.792705",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 285632515,
        "user_id": 16143,
        "timestamp": "2022-04-07T12:56:31.297218",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 285632515,
        "user_id": 16143,
        "timestamp": "2022-04-07T12:57:01.381329",
        "branch": "mine",
        "command_groups": []
    },
    {
        "repo_id": 274039239,
        "user_id": 7183947,
        "timestamp": "2022-04-07T12:57:32.522611",
        "branch": "experimental",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "reload it": "browser.reload()",
                    "reload it hard": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    },
    {
        "repo_id": 273639237,
        "user_id": 2071583,
        "timestamp": "2022-04-07T12:58:03.964735",
        "branch": "bhipple",
        "command_groups": []
    },
    {
        "repo_id": 273622533,
        "user_id": 1237457,
        "timestamp": "2022-04-07T12:58:34.945724",
        "branch": "local",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273104878,
        "user_id": 5633015,
        "timestamp": "2022-04-07T12:59:06.223717",
        "branch": "lexjacobs",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273104878,
        "user_id": 5633015,
        "timestamp": "2022-04-07T12:59:36.285950",
        "branch": "lexjacobs-bak",
        "command_groups": []
    },
    {
        "repo_id": 272562044,
        "user_id": 14012083,
        "timestamp": "2022-04-07T13:00:07.527549",
        "branch": "my-config",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/scala.talon",
                "context": "scala",
                "commands": {
                    "drawn from": "\" <- \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 272562044,
        "user_id": 14012083,
        "timestamp": "2022-04-07T13:00:37.654237",
        "branch": "my-config2",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "lang/scala.talon",
                "context": "scala",
                "commands": {
                    "drawn from": "\" <- \""
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 271209156,
        "user_id": 44053,
        "timestamp": "2022-04-07T13:01:08.914395",
        "branch": "mine",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste (that | it)": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 268076627,
        "user_id": 5120858,
        "timestamp": "2022-04-07T13:01:40.207908",
        "branch": "personal2",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ice": "i",
                    "judge": "j"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "empty": "space"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 266382222,
        "user_id": 1672198,
        "timestamp": "2022-04-07T13:02:11.846032",
        "branch": "livioso",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 264501308,
        "user_id": 11707739,
        "timestamp": "2022-04-07T13:02:43.212491",
        "branch": "mine",
        "command_groups": []
    },
    {
        "repo_id": 263009933,
        "user_id": 13691822,
        "timestamp": "2022-04-07T13:03:14.582731",
        "branch": "own_vocab",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 259113388,
        "user_id": 6349369,
        "timestamp": "2022-04-07T13:03:45.857213",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "joke": "j"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clear": "backspace",
                    "delhi": "delete",
                    "shock": "enter"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "(copy | stoush | stoosh)": "edit.copy()",
                    "cut": "edit.cut()",
                    "(paste | spark)": "edit.paste()"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git [diff | difference] (colour|color) words": "\"git diff --color-words \"",
                    "git (diff | difference)": "\"git diff \""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/markdown.talon",
                "context": "markdown",
                "commands": {
                    "header one": "\"# \"",
                    "header to": "\"## \"",
                    "header three": "\"### \"",
                    "header for": "\"#### \"",
                    "header five": "\"##### \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(comma and)": "\", \"",
                    "single arrow": "\"->\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clear line <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "(go word left | stone)": "edit.word_left()",
                    "(go word right | step)": "edit.word_right()",
                    "[go] left": "edit.left()",
                    "[go] right": "edit.right()",
                    "[go] up": "edit.up()",
                    "[go] down": "edit.down()",
                    "(go line start | paul | pull)": "edit.line_start()",
                    "(go line end | push)": "edit.line_end()",
                    "[go] page down": "edit.page_down()",
                    "[go] page up": "edit.page_up()",
                    "((select | sell) all)": "edit.select_all()",
                    "((select | sell) left)": "edit.extend_left()",
                    "((select | sell) right)": "edit.extend_right()",
                    "((select | sell) up)": "edit.extend_line_up()",
                    "((select | sell) down)": "edit.extend_line_down()",
                    "((select | sell) word left | sell stone)": "edit.extend_word_left()",
                    "((select | sell) word right | sell step)": "edit.extend_word_right()",
                    "((select | sell) way left | sell pull)": "edit.extend_line_start()",
                    "((select | sell) way right | sell push)": "edit.extend_line_end()",
                    "((select | sell) way up)": "edit.extend_file_start()",
                    "((select | sell) way down)": "edit.extend_file_end()",
                    "indent more": "edit.indent_more()",
                    "(clear word left | splat left | splat)": "edit.extend_word_left()\nedit.delete()",
                    "(clear word right | splat right | spliff)": "edit.extend_word_right()\nedit.delete()",
                    "(clear way left | scratch)": "edit.extend_line_start()\nedit.delete()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "[show] settings": "user.vscode(\"workbench.action.openGlobalSettings\")",
                    "[show] shortcuts": "user.vscode(\"workbench.action.openGlobalKeybindings\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 253386344,
        "user_id": 3613189,
        "timestamp": "2022-04-07T13:04:17.327837",
        "branch": "trapiers",
        "command_groups": []
    },
    {
        "repo_id": 251439585,
        "user_id": 567000,
        "timestamp": "2022-04-07T13:04:48.749051",
        "branch": "changes",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "save": "edit.save()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    },
    {
        "repo_id": 250298215,
        "user_id": 29916215,
        "timestamp": "2022-04-07T13:05:20.004181",
        "branch": "jjh-branch",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 248855369,
        "user_id": 2822010,
        "timestamp": "2022-04-07T13:05:50.978062",
        "branch": "experimental",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "reload it": "browser.reload()",
                    "reload it hard": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    }
]